{"ast":null,"code":"/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint vars:false, bitwise:true*/\n\n/*jshint indent:4*/\n\n/*global exports:true*/\n(function clone(exports) {\n  'use strict';\n\n  var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;\n\n  function deepCopy(obj) {\n    var ret = {},\n        key,\n        val;\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        val = obj[key];\n\n        if (typeof val === 'object' && val !== null) {\n          ret[key] = deepCopy(val);\n        } else {\n          ret[key] = val;\n        }\n      }\n    }\n\n    return ret;\n  } // based on LLVM libc++ upper_bound / lower_bound\n  // MIT License\n\n\n  function upperBound(array, func) {\n    var diff, len, i, current;\n    len = array.length;\n    i = 0;\n\n    while (len) {\n      diff = len >>> 1;\n      current = i + diff;\n\n      if (func(array[current])) {\n        len = diff;\n      } else {\n        i = current + 1;\n        len -= diff + 1;\n      }\n    }\n\n    return i;\n  }\n\n  Syntax = {\n    AssignmentExpression: 'AssignmentExpression',\n    AssignmentPattern: 'AssignmentPattern',\n    ArrayExpression: 'ArrayExpression',\n    ArrayPattern: 'ArrayPattern',\n    ArrowFunctionExpression: 'ArrowFunctionExpression',\n    AwaitExpression: 'AwaitExpression',\n    // CAUTION: It's deferred to ES7.\n    BlockStatement: 'BlockStatement',\n    BinaryExpression: 'BinaryExpression',\n    BreakStatement: 'BreakStatement',\n    CallExpression: 'CallExpression',\n    CatchClause: 'CatchClause',\n    ChainExpression: 'ChainExpression',\n    ClassBody: 'ClassBody',\n    ClassDeclaration: 'ClassDeclaration',\n    ClassExpression: 'ClassExpression',\n    ComprehensionBlock: 'ComprehensionBlock',\n    // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: 'ComprehensionExpression',\n    // CAUTION: It's deferred to ES7.\n    ConditionalExpression: 'ConditionalExpression',\n    ContinueStatement: 'ContinueStatement',\n    DebuggerStatement: 'DebuggerStatement',\n    DirectiveStatement: 'DirectiveStatement',\n    DoWhileStatement: 'DoWhileStatement',\n    EmptyStatement: 'EmptyStatement',\n    ExportAllDeclaration: 'ExportAllDeclaration',\n    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n    ExportNamedDeclaration: 'ExportNamedDeclaration',\n    ExportSpecifier: 'ExportSpecifier',\n    ExpressionStatement: 'ExpressionStatement',\n    ForStatement: 'ForStatement',\n    ForInStatement: 'ForInStatement',\n    ForOfStatement: 'ForOfStatement',\n    FunctionDeclaration: 'FunctionDeclaration',\n    FunctionExpression: 'FunctionExpression',\n    GeneratorExpression: 'GeneratorExpression',\n    // CAUTION: It's deferred to ES7.\n    Identifier: 'Identifier',\n    IfStatement: 'IfStatement',\n    ImportExpression: 'ImportExpression',\n    ImportDeclaration: 'ImportDeclaration',\n    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n    ImportSpecifier: 'ImportSpecifier',\n    Literal: 'Literal',\n    LabeledStatement: 'LabeledStatement',\n    LogicalExpression: 'LogicalExpression',\n    MemberExpression: 'MemberExpression',\n    MetaProperty: 'MetaProperty',\n    MethodDefinition: 'MethodDefinition',\n    ModuleSpecifier: 'ModuleSpecifier',\n    NewExpression: 'NewExpression',\n    ObjectExpression: 'ObjectExpression',\n    ObjectPattern: 'ObjectPattern',\n    Program: 'Program',\n    Property: 'Property',\n    RestElement: 'RestElement',\n    ReturnStatement: 'ReturnStatement',\n    SequenceExpression: 'SequenceExpression',\n    SpreadElement: 'SpreadElement',\n    Super: 'Super',\n    SwitchStatement: 'SwitchStatement',\n    SwitchCase: 'SwitchCase',\n    TaggedTemplateExpression: 'TaggedTemplateExpression',\n    TemplateElement: 'TemplateElement',\n    TemplateLiteral: 'TemplateLiteral',\n    ThisExpression: 'ThisExpression',\n    ThrowStatement: 'ThrowStatement',\n    TryStatement: 'TryStatement',\n    UnaryExpression: 'UnaryExpression',\n    UpdateExpression: 'UpdateExpression',\n    VariableDeclaration: 'VariableDeclaration',\n    VariableDeclarator: 'VariableDeclarator',\n    WhileStatement: 'WhileStatement',\n    WithStatement: 'WithStatement',\n    YieldExpression: 'YieldExpression'\n  };\n  VisitorKeys = {\n    AssignmentExpression: ['left', 'right'],\n    AssignmentPattern: ['left', 'right'],\n    ArrayExpression: ['elements'],\n    ArrayPattern: ['elements'],\n    ArrowFunctionExpression: ['params', 'body'],\n    AwaitExpression: ['argument'],\n    // CAUTION: It's deferred to ES7.\n    BlockStatement: ['body'],\n    BinaryExpression: ['left', 'right'],\n    BreakStatement: ['label'],\n    CallExpression: ['callee', 'arguments'],\n    CatchClause: ['param', 'body'],\n    ChainExpression: ['expression'],\n    ClassBody: ['body'],\n    ClassDeclaration: ['id', 'superClass', 'body'],\n    ClassExpression: ['id', 'superClass', 'body'],\n    ComprehensionBlock: ['left', 'right'],\n    // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: ['blocks', 'filter', 'body'],\n    // CAUTION: It's deferred to ES7.\n    ConditionalExpression: ['test', 'consequent', 'alternate'],\n    ContinueStatement: ['label'],\n    DebuggerStatement: [],\n    DirectiveStatement: [],\n    DoWhileStatement: ['body', 'test'],\n    EmptyStatement: [],\n    ExportAllDeclaration: ['source'],\n    ExportDefaultDeclaration: ['declaration'],\n    ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n    ExportSpecifier: ['exported', 'local'],\n    ExpressionStatement: ['expression'],\n    ForStatement: ['init', 'test', 'update', 'body'],\n    ForInStatement: ['left', 'right', 'body'],\n    ForOfStatement: ['left', 'right', 'body'],\n    FunctionDeclaration: ['id', 'params', 'body'],\n    FunctionExpression: ['id', 'params', 'body'],\n    GeneratorExpression: ['blocks', 'filter', 'body'],\n    // CAUTION: It's deferred to ES7.\n    Identifier: [],\n    IfStatement: ['test', 'consequent', 'alternate'],\n    ImportExpression: ['source'],\n    ImportDeclaration: ['specifiers', 'source'],\n    ImportDefaultSpecifier: ['local'],\n    ImportNamespaceSpecifier: ['local'],\n    ImportSpecifier: ['imported', 'local'],\n    Literal: [],\n    LabeledStatement: ['label', 'body'],\n    LogicalExpression: ['left', 'right'],\n    MemberExpression: ['object', 'property'],\n    MetaProperty: ['meta', 'property'],\n    MethodDefinition: ['key', 'value'],\n    ModuleSpecifier: [],\n    NewExpression: ['callee', 'arguments'],\n    ObjectExpression: ['properties'],\n    ObjectPattern: ['properties'],\n    Program: ['body'],\n    Property: ['key', 'value'],\n    RestElement: ['argument'],\n    ReturnStatement: ['argument'],\n    SequenceExpression: ['expressions'],\n    SpreadElement: ['argument'],\n    Super: [],\n    SwitchStatement: ['discriminant', 'cases'],\n    SwitchCase: ['test', 'consequent'],\n    TaggedTemplateExpression: ['tag', 'quasi'],\n    TemplateElement: [],\n    TemplateLiteral: ['quasis', 'expressions'],\n    ThisExpression: [],\n    ThrowStatement: ['argument'],\n    TryStatement: ['block', 'handler', 'finalizer'],\n    UnaryExpression: ['argument'],\n    UpdateExpression: ['argument'],\n    VariableDeclaration: ['declarations'],\n    VariableDeclarator: ['id', 'init'],\n    WhileStatement: ['test', 'body'],\n    WithStatement: ['object', 'body'],\n    YieldExpression: ['argument']\n  }; // unique id\n\n  BREAK = {};\n  SKIP = {};\n  REMOVE = {};\n  VisitorOption = {\n    Break: BREAK,\n    Skip: SKIP,\n    Remove: REMOVE\n  };\n\n  function Reference(parent, key) {\n    this.parent = parent;\n    this.key = key;\n  }\n\n  Reference.prototype.replace = function replace(node) {\n    this.parent[this.key] = node;\n  };\n\n  Reference.prototype.remove = function remove() {\n    if (Array.isArray(this.parent)) {\n      this.parent.splice(this.key, 1);\n      return true;\n    } else {\n      this.replace(null);\n      return false;\n    }\n  };\n\n  function Element(node, path, wrap, ref) {\n    this.node = node;\n    this.path = path;\n    this.wrap = wrap;\n    this.ref = ref;\n  }\n\n  function Controller() {} // API:\n  // return property path array from root to current node\n\n\n  Controller.prototype.path = function path() {\n    var i, iz, j, jz, result, element;\n\n    function addToPath(result, path) {\n      if (Array.isArray(path)) {\n        for (j = 0, jz = path.length; j < jz; ++j) {\n          result.push(path[j]);\n        }\n      } else {\n        result.push(path);\n      }\n    } // root node\n\n\n    if (!this.__current.path) {\n      return null;\n    } // first node is sentinel, second node is root element\n\n\n    result = [];\n\n    for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n      element = this.__leavelist[i];\n      addToPath(result, element.path);\n    }\n\n    addToPath(result, this.__current.path);\n    return result;\n  }; // API:\n  // return type of current node\n\n\n  Controller.prototype.type = function () {\n    var node = this.current();\n    return node.type || this.__current.wrap;\n  }; // API:\n  // return array of parent elements\n\n\n  Controller.prototype.parents = function parents() {\n    var i, iz, result; // first node is sentinel\n\n    result = [];\n\n    for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n      result.push(this.__leavelist[i].node);\n    }\n\n    return result;\n  }; // API:\n  // return current node\n\n\n  Controller.prototype.current = function current() {\n    return this.__current.node;\n  };\n\n  Controller.prototype.__execute = function __execute(callback, element) {\n    var previous, result;\n    result = undefined;\n    previous = this.__current;\n    this.__current = element;\n    this.__state = null;\n\n    if (callback) {\n      result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n    }\n\n    this.__current = previous;\n    return result;\n  }; // API:\n  // notify control skip / break\n\n\n  Controller.prototype.notify = function notify(flag) {\n    this.__state = flag;\n  }; // API:\n  // skip child nodes of current node\n\n\n  Controller.prototype.skip = function () {\n    this.notify(SKIP);\n  }; // API:\n  // break traversals\n\n\n  Controller.prototype['break'] = function () {\n    this.notify(BREAK);\n  }; // API:\n  // remove node\n\n\n  Controller.prototype.remove = function () {\n    this.notify(REMOVE);\n  };\n\n  Controller.prototype.__initialize = function (root, visitor) {\n    this.visitor = visitor;\n    this.root = root;\n    this.__worklist = [];\n    this.__leavelist = [];\n    this.__current = null;\n    this.__state = null;\n    this.__fallback = null;\n\n    if (visitor.fallback === 'iteration') {\n      this.__fallback = Object.keys;\n    } else if (typeof visitor.fallback === 'function') {\n      this.__fallback = visitor.fallback;\n    }\n\n    this.__keys = VisitorKeys;\n\n    if (visitor.keys) {\n      this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n    }\n  };\n\n  function isNode(node) {\n    if (node == null) {\n      return false;\n    }\n\n    return typeof node === 'object' && typeof node.type === 'string';\n  }\n\n  function isProperty(nodeType, key) {\n    return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n  }\n\n  function candidateExistsInLeaveList(leavelist, candidate) {\n    for (var i = leavelist.length - 1; i >= 0; --i) {\n      if (leavelist[i].node === candidate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Controller.prototype.traverse = function traverse(root, visitor) {\n    var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;\n\n    this.__initialize(root, visitor);\n\n    sentinel = {}; // reference\n\n    worklist = this.__worklist;\n    leavelist = this.__leavelist; // initialize\n\n    worklist.push(new Element(root, null, null, null));\n    leavelist.push(new Element(null, null, null, null));\n\n    while (worklist.length) {\n      element = worklist.pop();\n\n      if (element === sentinel) {\n        element = leavelist.pop();\n        ret = this.__execute(visitor.leave, element);\n\n        if (this.__state === BREAK || ret === BREAK) {\n          return;\n        }\n\n        continue;\n      }\n\n      if (element.node) {\n        ret = this.__execute(visitor.enter, element);\n\n        if (this.__state === BREAK || ret === BREAK) {\n          return;\n        }\n\n        worklist.push(sentinel);\n        leavelist.push(element);\n\n        if (this.__state === SKIP || ret === SKIP) {\n          continue;\n        }\n\n        node = element.node;\n        nodeType = node.type || element.wrap;\n        candidates = this.__keys[nodeType];\n\n        if (!candidates) {\n          if (this.__fallback) {\n            candidates = this.__fallback(node);\n          } else {\n            throw new Error('Unknown node type ' + nodeType + '.');\n          }\n        }\n\n        current = candidates.length;\n\n        while ((current -= 1) >= 0) {\n          key = candidates[current];\n          candidate = node[key];\n\n          if (!candidate) {\n            continue;\n          }\n\n          if (Array.isArray(candidate)) {\n            current2 = candidate.length;\n\n            while ((current2 -= 1) >= 0) {\n              if (!candidate[current2]) {\n                continue;\n              }\n\n              if (candidateExistsInLeaveList(leavelist, candidate[current2])) {\n                continue;\n              }\n\n              if (isProperty(nodeType, candidates[current])) {\n                element = new Element(candidate[current2], [key, current2], 'Property', null);\n              } else if (isNode(candidate[current2])) {\n                element = new Element(candidate[current2], [key, current2], null, null);\n              } else {\n                continue;\n              }\n\n              worklist.push(element);\n            }\n          } else if (isNode(candidate)) {\n            if (candidateExistsInLeaveList(leavelist, candidate)) {\n              continue;\n            }\n\n            worklist.push(new Element(candidate, key, null, null));\n          }\n        }\n      }\n    }\n  };\n\n  Controller.prototype.replace = function replace(root, visitor) {\n    var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;\n\n    function removeElem(element) {\n      var i, key, nextElem, parent;\n\n      if (element.ref.remove()) {\n        // When the reference is an element of an array.\n        key = element.ref.key;\n        parent = element.ref.parent; // If removed from array, then decrease following items' keys.\n\n        i = worklist.length;\n\n        while (i--) {\n          nextElem = worklist[i];\n\n          if (nextElem.ref && nextElem.ref.parent === parent) {\n            if (nextElem.ref.key < key) {\n              break;\n            }\n\n            --nextElem.ref.key;\n          }\n        }\n      }\n    }\n\n    this.__initialize(root, visitor);\n\n    sentinel = {}; // reference\n\n    worklist = this.__worklist;\n    leavelist = this.__leavelist; // initialize\n\n    outer = {\n      root: root\n    };\n    element = new Element(root, null, null, new Reference(outer, 'root'));\n    worklist.push(element);\n    leavelist.push(element);\n\n    while (worklist.length) {\n      element = worklist.pop();\n\n      if (element === sentinel) {\n        element = leavelist.pop();\n        target = this.__execute(visitor.leave, element); // node may be replaced with null,\n        // so distinguish between undefined and null in this place\n\n        if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n          // replace\n          element.ref.replace(target);\n        }\n\n        if (this.__state === REMOVE || target === REMOVE) {\n          removeElem(element);\n        }\n\n        if (this.__state === BREAK || target === BREAK) {\n          return outer.root;\n        }\n\n        continue;\n      }\n\n      target = this.__execute(visitor.enter, element); // node may be replaced with null,\n      // so distinguish between undefined and null in this place\n\n      if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n        // replace\n        element.ref.replace(target);\n        element.node = target;\n      }\n\n      if (this.__state === REMOVE || target === REMOVE) {\n        removeElem(element);\n        element.node = null;\n      }\n\n      if (this.__state === BREAK || target === BREAK) {\n        return outer.root;\n      } // node may be null\n\n\n      node = element.node;\n\n      if (!node) {\n        continue;\n      }\n\n      worklist.push(sentinel);\n      leavelist.push(element);\n\n      if (this.__state === SKIP || target === SKIP) {\n        continue;\n      }\n\n      nodeType = node.type || element.wrap;\n      candidates = this.__keys[nodeType];\n\n      if (!candidates) {\n        if (this.__fallback) {\n          candidates = this.__fallback(node);\n        } else {\n          throw new Error('Unknown node type ' + nodeType + '.');\n        }\n      }\n\n      current = candidates.length;\n\n      while ((current -= 1) >= 0) {\n        key = candidates[current];\n        candidate = node[key];\n\n        if (!candidate) {\n          continue;\n        }\n\n        if (Array.isArray(candidate)) {\n          current2 = candidate.length;\n\n          while ((current2 -= 1) >= 0) {\n            if (!candidate[current2]) {\n              continue;\n            }\n\n            if (isProperty(nodeType, candidates[current])) {\n              element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n            } else if (isNode(candidate[current2])) {\n              element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n            } else {\n              continue;\n            }\n\n            worklist.push(element);\n          }\n        } else if (isNode(candidate)) {\n          worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n        }\n      }\n    }\n\n    return outer.root;\n  };\n\n  function traverse(root, visitor) {\n    var controller = new Controller();\n    return controller.traverse(root, visitor);\n  }\n\n  function replace(root, visitor) {\n    var controller = new Controller();\n    return controller.replace(root, visitor);\n  }\n\n  function extendCommentRange(comment, tokens) {\n    var target;\n    target = upperBound(tokens, function search(token) {\n      return token.range[0] > comment.range[0];\n    });\n    comment.extendedRange = [comment.range[0], comment.range[1]];\n\n    if (target !== tokens.length) {\n      comment.extendedRange[1] = tokens[target].range[0];\n    }\n\n    target -= 1;\n\n    if (target >= 0) {\n      comment.extendedRange[0] = tokens[target].range[1];\n    }\n\n    return comment;\n  }\n\n  function attachComments(tree, providedComments, tokens) {\n    // At first, we should calculate extended comment ranges.\n    var comments = [],\n        comment,\n        len,\n        i,\n        cursor;\n\n    if (!tree.range) {\n      throw new Error('attachComments needs range information');\n    } // tokens array is empty, we attach comments to tree as 'leadingComments'\n\n\n    if (!tokens.length) {\n      if (providedComments.length) {\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n          comment = deepCopy(providedComments[i]);\n          comment.extendedRange = [0, tree.range[0]];\n          comments.push(comment);\n        }\n\n        tree.leadingComments = comments;\n      }\n\n      return tree;\n    }\n\n    for (i = 0, len = providedComments.length; i < len; i += 1) {\n      comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n    } // This is based on John Freeman's implementation.\n\n\n    cursor = 0;\n    traverse(tree, {\n      enter: function (node) {\n        var comment;\n\n        while (cursor < comments.length) {\n          comment = comments[cursor];\n\n          if (comment.extendedRange[1] > node.range[0]) {\n            break;\n          }\n\n          if (comment.extendedRange[1] === node.range[0]) {\n            if (!node.leadingComments) {\n              node.leadingComments = [];\n            }\n\n            node.leadingComments.push(comment);\n            comments.splice(cursor, 1);\n          } else {\n            cursor += 1;\n          }\n        } // already out of owned node\n\n\n        if (cursor === comments.length) {\n          return VisitorOption.Break;\n        }\n\n        if (comments[cursor].extendedRange[0] > node.range[1]) {\n          return VisitorOption.Skip;\n        }\n      }\n    });\n    cursor = 0;\n    traverse(tree, {\n      leave: function (node) {\n        var comment;\n\n        while (cursor < comments.length) {\n          comment = comments[cursor];\n\n          if (node.range[1] < comment.extendedRange[0]) {\n            break;\n          }\n\n          if (node.range[1] === comment.extendedRange[0]) {\n            if (!node.trailingComments) {\n              node.trailingComments = [];\n            }\n\n            node.trailingComments.push(comment);\n            comments.splice(cursor, 1);\n          } else {\n            cursor += 1;\n          }\n        } // already out of owned node\n\n\n        if (cursor === comments.length) {\n          return VisitorOption.Break;\n        }\n\n        if (comments[cursor].extendedRange[0] > node.range[1]) {\n          return VisitorOption.Skip;\n        }\n      }\n    });\n    return tree;\n  }\n\n  exports.Syntax = Syntax;\n  exports.traverse = traverse;\n  exports.replace = replace;\n  exports.attachComments = attachComments;\n  exports.VisitorKeys = VisitorKeys;\n  exports.VisitorOption = VisitorOption;\n  exports.Controller = Controller;\n\n  exports.cloneEnvironment = function () {\n    return clone({});\n  };\n\n  return exports;\n})(exports);\n/* vim: set sw=4 ts=4 et tw=80 : */","map":{"version":3,"names":["clone","exports","Syntax","VisitorOption","VisitorKeys","BREAK","SKIP","REMOVE","deepCopy","obj","ret","key","val","hasOwnProperty","upperBound","array","func","diff","len","i","current","length","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ChainExpression","ClassBody","ClassDeclaration","ClassExpression","ComprehensionBlock","ComprehensionExpression","ConditionalExpression","ContinueStatement","DebuggerStatement","DirectiveStatement","DoWhileStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","GeneratorExpression","Identifier","IfStatement","ImportExpression","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","ModuleSpecifier","NewExpression","ObjectExpression","ObjectPattern","Program","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchStatement","SwitchCase","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","Break","Skip","Remove","Reference","parent","prototype","replace","node","remove","Array","isArray","splice","Element","path","wrap","ref","Controller","iz","j","jz","result","element","addToPath","push","__current","__leavelist","type","parents","__execute","callback","previous","undefined","__state","call","notify","flag","skip","__initialize","root","visitor","__worklist","__fallback","fallback","Object","keys","__keys","assign","create","isNode","isProperty","nodeType","candidateExistsInLeaveList","leavelist","candidate","traverse","worklist","current2","candidates","sentinel","pop","leave","enter","Error","target","outer","removeElem","nextElem","controller","extendCommentRange","comment","tokens","search","token","range","extendedRange","attachComments","tree","providedComments","comments","cursor","leadingComments","trailingComments","cloneEnvironment"],"sources":["C:/Users/nvdun/Documents/Zalo Received Files/covid_19_ProjectFE2/node_modules/esrecurse/node_modules/estraverse/estraverse.js"],"sourcesContent":["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true*/\n(function clone(exports) {\n    'use strict';\n\n    var Syntax,\n        VisitorOption,\n        VisitorKeys,\n        BREAK,\n        SKIP,\n        REMOVE;\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ChainExpression: 'ChainExpression',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportExpression: 'ImportExpression',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        ModuleSpecifier: 'ModuleSpecifier',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        AssignmentPattern: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'body'],\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ChainExpression: ['expression'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'superClass', 'body'],\n        ClassExpression: ['id', 'superClass', 'body'],\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExportAllDeclaration: ['source'],\n        ExportDefaultDeclaration: ['declaration'],\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n        ExportSpecifier: ['exported', 'local'],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        ImportExpression: ['source'],\n        ImportDeclaration: ['specifiers', 'source'],\n        ImportDefaultSpecifier: ['local'],\n        ImportNamespaceSpecifier: ['local'],\n        ImportSpecifier: ['imported', 'local'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        MetaProperty: ['meta', 'property'],\n        MethodDefinition: ['key', 'value'],\n        ModuleSpecifier: [],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        RestElement: [ 'argument' ],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SpreadElement: ['argument'],\n        Super: [],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        TaggedTemplateExpression: ['tag', 'quasi'],\n        TemplateElement: [],\n        TemplateLiteral: ['quasis', 'expressions'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handler', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n\n    Reference.prototype.remove = function remove() {\n        if (Array.isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n\n    function Controller() { }\n\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n\n        function addToPath(result, path) {\n            if (Array.isArray(path)) {\n                for (j = 0, jz = path.length; j < jz; ++j) {\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n\n        // first node is sentinel, second node is root element\n        result = [];\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n\n    // API:\n    // return type of current node\n    Controller.prototype.type = function () {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n\n        // first node is sentinel\n        result = [];\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n            result.push(this.__leavelist[i].node);\n        }\n\n        return result;\n    };\n\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n\n        result = undefined;\n\n        previous  = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n\n        return result;\n    };\n\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function () {\n        this.notify(SKIP);\n    };\n\n    // API:\n    // break traversals\n    Controller.prototype['break'] = function () {\n        this.notify(BREAK);\n    };\n\n    // API:\n    // remove node\n    Controller.prototype.remove = function () {\n        this.notify(REMOVE);\n    };\n\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === 'iteration') {\n            this.__fallback = Object.keys;\n        } else if (typeof visitor.fallback === 'function') {\n            this.__fallback = visitor.fallback;\n        }\n\n        this.__keys = VisitorKeys;\n        if (visitor.keys) {\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n        }\n    };\n\n    function isNode(node) {\n        if (node == null) {\n            return false;\n        }\n        return typeof node === 'object' && typeof node.type === 'string';\n    }\n\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n    }\n  \n    function candidateExistsInLeaveList(leavelist, candidate) {\n        for (var i = leavelist.length - 1; i >= 0; --i) {\n            if (leavelist[i].node === candidate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist,\n            leavelist,\n            element,\n            node,\n            nodeType,\n            ret,\n            key,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                ret = this.__execute(visitor.leave, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n\n            if (element.node) {\n\n                ret = this.__execute(visitor.enter, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n\n                worklist.push(sentinel);\n                leavelist.push(element);\n\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) {\n                        candidates = this.__fallback(node);\n                    } else {\n                        throw new Error('Unknown node type ' + nodeType + '.');\n                    }\n                }\n\n                current = candidates.length;\n                while ((current -= 1) >= 0) {\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n\n                    if (Array.isArray(candidate)) {\n                        current2 = candidate.length;\n                        while ((current2 -= 1) >= 0) {\n                            if (!candidate[current2]) {\n                                continue;\n                            }\n\n                            if (candidateExistsInLeaveList(leavelist, candidate[current2])) {\n                              continue;\n                            }\n\n                            if (isProperty(nodeType, candidates[current])) {\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\n                            } else if (isNode(candidate[current2])) {\n                                element = new Element(candidate[current2], [key, current2], null, null);\n                            } else {\n                                continue;\n                            }\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) {\n                        if (candidateExistsInLeaveList(leavelist, candidate)) {\n                          continue;\n                        }\n\n                        worklist.push(new Element(candidate, key, null, null));\n                    }\n                }\n            }\n        }\n    };\n\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist,\n            leavelist,\n            node,\n            nodeType,\n            target,\n            element,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel,\n            outer,\n            key;\n\n        function removeElem(element) {\n            var i,\n                key,\n                nextElem,\n                parent;\n\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while (i--) {\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if  (nextElem.ref.key < key) {\n                            break;\n                        }\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, 'root'));\n        worklist.push(element);\n        leavelist.push(element);\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                target = this.__execute(visitor.leave, element);\n\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                    // replace\n                    element.ref.replace(target);\n                }\n\n                if (this.__state === REMOVE || target === REMOVE) {\n                    removeElem(element);\n                }\n\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n\n            target = this.__execute(visitor.enter, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error('Unknown node type ' + nodeType + '.');\n                }\n            }\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (Array.isArray(candidate)) {\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                }\n            }\n        }\n\n        return outer.root;\n    };\n\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        cursor = 0;\n        traverse(tree, {\n            leave: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.attachComments = attachComments;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n    exports.Controller = Controller;\n    exports.cloneEnvironment = function () { return clone({}); };\n\n    return exports;\n}(exports));\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}